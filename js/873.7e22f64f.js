"use strict";(self["webpackChunkblog_jean"]=self["webpackChunkblog_jean"]||[]).push([[873],{3759:function(e,o,a){a.r(o),a.d(o,{default:function(){return V}});var s=a(6768);const n={id:"about-page"},r={class:"space-background"},i={autoplay:"",muted:"",loop:""},t=["src"];function d(e,o,a,d,l,c){const p=(0,s.g2)("MyProjects");return(0,s.uX)(),(0,s.CE)("main",n,[(0,s.Lk)("div",r,[(0,s.Lk)("video",i,[(0,s.Lk)("source",{src:l.space,type:"video/mp4"},null,8,t)])]),(0,s.bF)(p)])}var l=a(5130);const c={style:{display:"flex","justify-content":"center"}},p={key:0,class:"outer"},m={class:"inner"};function u(e,o,a,n,r,i){const t=(0,s.g2)("ProjectCarousel");return(0,s.uX)(),(0,s.CE)(s.FK,null,[(0,s.Lk)("div",c,[(0,s.Lk)("button",{class:"button-projects",style:{"font-size":"3.8rem"},onClick:o[0]||(o[0]=e=>r.show=!r.show)},"PROJETOS")]),(0,s.bF)(l.eB,{duration:550,name:"nested"},{default:(0,s.k6)((()=>[r.show?((0,s.uX)(),(0,s.CE)("div",p,[(0,s.Lk)("div",m,[(0,s.bF)(t,{projects:r.myProjects},null,8,["projects"])])])):(0,s.Q3)("",!0)])),_:1})],64)}var g=a(4232);const b=e=>((0,s.Qi)("data-v-6fa0bbe2"),e=e(),(0,s.jt)(),e),f={class:"project-carousel"},v={class:"project-menu"},h=b((()=>(0,s.Lk)("h2",null,"Projetos",-1))),j=b((()=>(0,s.Lk)("br",null,null,-1))),k=["onClick"],C={key:0},P=["src"],E=b((()=>(0,s.Lk)("br",null,null,-1))),x=b((()=>(0,s.Lk)("h4",null,"Codificação e documentação",-1))),z={class:"project-links"},T=["href"],A=["innerHTML"],S={class:"buttons"},L=["disabled"],w=["disabled"];function D(e,o,a,n,r,i){return(0,s.uX)(),(0,s.CE)("div",f,[(0,s.Lk)("div",v,[h,j,(0,s.Lk)("ul",null,[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(a.projects,((e,o)=>((0,s.uX)(),(0,s.CE)("li",{key:e.titulo},[(0,s.Lk)("a",{onClick:(0,l.D$)((e=>i.goToProject(o)),["prevent"]),href:"#"},(0,g.v_)(e.titulo),9,k)])))),128))])]),i.currentProject?((0,s.uX)(),(0,s.CE)("div",C,[(0,s.Lk)("img",{src:i.currentProject.imagem,alt:"Imagem do projeto",class:"project-image"},null,8,P),(0,s.Lk)("h2",null,(0,g.v_)(i.currentProject.titulo),1),(0,s.Lk)("h4",null,"Produzido em "+(0,g.v_)(i.currentProject.anoCriacao),1),E,x,(0,s.Lk)("div",z,[((0,s.uX)(!0),(0,s.CE)(s.FK,null,(0,s.pI)(i.currentProject.links,(e=>((0,s.uX)(),(0,s.CE)("a",{key:e.text,href:e.link,target:"_blank"},(0,g.v_)(e.text),9,T)))),128))]),(0,s.Lk)("p",{style:{"text-align":"justify"},innerHTML:i.currentProject.descricao},null,8,A)])):(0,s.Q3)("",!0),(0,s.Lk)("div",S,[(0,s.Lk)("button",{onClick:o[0]||(o[0]=(...e)=>i.prevProject&&i.prevProject(...e)),disabled:0===r.currentIndex},"Anterior",8,L),(0,s.Lk)("button",{onClick:o[1]||(o[1]=(...e)=>i.nextProject&&i.nextProject(...e)),disabled:r.currentIndex===a.projects.length-1},"Próximo",8,w)])])}var I={props:{projects:{type:Array,required:!0}},data(){return{currentIndex:0}},computed:{currentProject(){return this.projects[this.currentIndex]}},methods:{nextProject(){this.currentIndex<this.projects.length-1&&this.currentIndex++},prevProject(){this.currentIndex>0&&this.currentIndex--},goToProject(e){this.currentIndex=e}}},R=a(1241);const M=(0,R.A)(I,[["render",D],["__scopeId","data-v-6fa0bbe2"]]);var y=M,F=a.p+"img/dsMove.3e90fdea.png",O=a.p+"img/blogPessoal.35c30790.png",U=a.p+"img/tarefasCRUD.ac013488.png",q=a.p+"img/nlwCopa.9a76d35b.png",N=a.p+"img/biblioteca.255da985.png",B=a.p+"img/net8.fcb4852b.png",J={components:{ProjectCarousel:y},data(){return{show:!1,myProjects:[{imagem:O,links:[{text:"GitHub",link:"https://github.com/jeanlsfortes/blog-jean"},{text:"Live Demo",link:"https://jeanlsfortes.github.io/blog-jean/"}],titulo:"Blog Pessoal",anoCriacao:"agosto 2024",descricao:"<h1>My Blog</h1>\n            É um blog pessoal desenvolvido com <strong>Vue.js</strong> que serve como um portfólio interativo para compartilhar as experiências, projetos e certificações de um desenvolvedor. Este blog é uma plataforma dinâmica e moderna onde o autor pode documentar sua jornada profissional, destacando suas habilidades e conquistas.</p>\n            <br>\n            <h2>Tecnologias Utilizadas</h2>\n            <br>\n            <h3>Frontend: Vue.js</h3>\n            <br>\n            <ul>\n                <li><strong>Vue.js</strong> é um framework JavaScript progressivo utilizado para construir interfaces de usuário. Ele é conhecido por sua simplicidade e flexibilidade, permitindo a criação de componentes reutilizáveis e uma integração fácil com outras bibliotecas ou projetos existentes. Com Vue.js, o blog é altamente responsivo e oferece uma experiência de usuário fluida.</li>\n            </ul>\n            <br>\n            <h2>Funcionalidades do My Blog</h2>\n            <br>\n            <ul>\n                <li><strong>Apresentação de Experiências</strong>: O blog permite ao desenvolvedor compartilhar suas experiências profissionais, detalhando projetos anteriores, desafios enfrentados e soluções implementadas.</li>\n                <li><strong>Portfólio de Trabalhos</strong>: Uma seção dedicada para exibir os projetos desenvolvidos, com descrições detalhadas, tecnologias utilizadas e links para repositórios ou demonstrações ao vivo.</li>\n                <li><strong>Certificações</strong>: Uma área onde o desenvolvedor pode listar suas certificações, cursos concluídos e outras qualificações relevantes, demonstrando seu compromisso com o aprendizado contínuo.</li>\n                <li><strong>Blog de Artigos Técnicos</strong>: O desenvolvedor pode publicar artigos sobre temas técnicos, tutoriais e insights da indústria, contribuindo para a comunidade de desenvolvedores e compartilhando seu conhecimento.</li>\n                <li><strong>Interface Responsiva</strong>: Desenvolvido com Vue.js, o blog é adaptável a diferentes dispositivos, proporcionando uma experiência consistente em desktops, tablets e smartphones.</li></ul>"},{imagem:B,links:[{text:"GitHub",link:"https://github.com/jeanlsfortes/Catalogo"}],titulo:"Catálogo de Produtos - API",anoCriacao:"julho 2024",descricao:"<h1>API RESTful com .NET 8 e Testes Unitários</h1>\n                      <br>\n                      <p>Este projeto foi desenvolvido como parte de um curso que aborda os principais recursos para a criação de APIs REST na plataforma .NET utilizando o <strong>ASP.NET Core</strong>. O projeto explora conceitos fundamentais e avançados na construção de Web APIs robustas e escaláveis.</p>\n                      <br>\n                      <h2>Tecnologias e Conceitos Abordados</h2>\n                      <br>\n                      <ul>\n                          <li><strong>REST</strong>: Implementação de APIs seguindo os princípios RESTful, garantindo uma comunicação padronizada e eficiente entre cliente e servidor.</li>\n                          <li><strong>JSON</strong>: Utilização do formato JSON (JavaScript Object Notation) para troca de dados entre o cliente e o servidor, garantindo leveza e compatibilidade com diversas plataformas.</li>\n                          <li><strong>HTTP</strong>: Exploração dos métodos HTTP (GET, POST, PUT, DELETE) para realizar as operações de CRUD (Create, Read, Update, Delete) na API.</li>\n                          <li><strong>ASP.NET Core</strong>: Framework utilizado para a criação de Web APIs modernas, seguras e de alta performance, aproveitando as vantagens do .NET Core.</li>\n                          <li><strong>Entity Framework Core</strong>: Implementação do EF Core na abordagem Code-First, facilitando a modelagem de dados e a interação com o banco de dados. O projeto também explora a aplicação de Migrations para gerenciar alterações no esquema do banco de dados.</li>\n                      </ul>\n                      <br>\n                      <h2>Funcionalidades e Padrões de Projeto</h2>\n                      <br>\n                      <ul>\n                          <li><strong>Roteamento</strong>: Configuração de rotas personalizadas para os endpoints da API, permitindo um controle granular sobre as URLs e a forma como as requisições são tratadas.</li>\n                          <li><strong>Filtros</strong>: Implementação de filtros para manipulação de requisições e respostas, incluindo autenticação, autorização e tratamento de erros.</li>\n                          <li><strong>Métodos Assíncronos</strong>: Utilização de métodos assíncronos (async/await) para melhorar a performance e a escalabilidade da API, especialmente em operações que envolvem I/O (Input/Output).</li>\n                          <li><strong>Logging</strong>: Configuração de logging para monitoramento e diagnóstico da aplicação, facilitando a identificação e resolução de problemas.</li>\n                          <li><strong>Tratamento de Erros</strong>: Implementação de estratégias para captura e tratamento de erros, garantindo respostas adequadas e informativas aos clientes da API.</li>\n                          <li><strong>Paginação de Dados</strong>: Implementação de paginação para controlar o volume de dados retornado em respostas, melhorando a performance e a usabilidade da API.</li>\n                          <li><strong>Padrões Repository e Unit of Work</strong>: Adoção dos padrões Repository e Unit of Work para organizar a lógica de acesso a dados e garantir transações consistentes.</li>\n                          <li><strong>AutoMapper</strong>: Utilização do AutoMapper para simplificar o mapeamento entre objetos de domínio e Data Transfer Objects (DTOs), facilitando a transformação de dados entre camadas da aplicação.</li>\n                      </ul>\n                      <br>\n                      <h2>Testes Unitários</h2>\n                      <br>\n                      <ul>\n                          <li><strong>NUnit</strong>: O projeto utiliza o framework de testes <strong>NUnit</strong> para a criação e execução de testes unitários, garantindo a qualidade e a robustez do código.</li>\n                          <li><strong>Moq</strong>: Para simular dependências e testar a lógica de negócios de forma isolada, o projeto faz uso da biblioteca <strong>Moq</strong>, permitindo a criação de mocks e stubs para classes e interfaces.</li>\n                          <li><strong>Testes de Controllers</strong>: Testes focados nos controllers da API foram implementados para verificar se as rotas e ações estão funcionando corretamente, incluindo testes de cenários de sucesso e de erro.</li>\n                          <li><strong>Testes de Repositórios</strong>: Os repositórios foram testados para garantir que as operações de acesso a dados funcionem conforme o esperado, assegurando a integridade das transações.</li>\n                          <li><strong>Testes de Serviços</strong>: Os serviços, que encapsulam a lógica de negócios, também foram testados para validar sua funcionalidade e garantir que as regras de negócio sejam aplicadas corretamente.</li>\n                      </ul><br>"},{imagem:U,links:[{text:"GitHub",link:"https://github.com/jeanlsfortes/ProjetoTarefasCRUD/"}],titulo:"Projeto Tarefas CRUD",anoCriacao:"Maio de 2023",descricao:"<h1>CRUD em C# com .NET 6 </h1>\n              <br>\n                <p>Este projeto é um CRUD (Create, Read, Update, Delete) desenvolvido em <strong>C#</strong> utilizando o framework <strong>.NET 6</strong>. \n                  A aplicação faz uso de <strong>Dapper</strong> para interações eficientes com o banco de dados, aproveitando a simplicidade e flexibilidade desse micro ORM. O projeto também adota o padrão de repositório para a separação de lógica de acesso a dados, promovendo um design limpo e fácil de manter.</p>\n                  <br>\n                <h2>Estrutura do Projeto</h2>\n                <br>\n                <h3>Controllers</h3>\n                <br>\n                <ul>\n                  <li>Os <strong>Controllers</strong> são responsáveis por gerenciar as requisições HTTP, vinculando as ações aos métodos do CRUD. Eles garantem a lógica de roteamento e comunicação com os serviços e repositórios, permitindo que as operações de criar, ler, atualizar e deletar dados sejam executadas conforme esperado.</li>\n                </ul>\n                <br>\n                <h3>Enums</h3>\n                <br>\n                <ul>\n                  <li>O projeto utiliza <strong>Enums</strong> para definir conjuntos de valores nomeados, facilitando o gerenciamento de estados ou opções predefinidas, como status de registros, tipos de usuários, entre outros. Os enums melhoram a legibilidade e a manutenção do código, além de reduzir erros associados a valores constantes dispersos.</li>\n                </ul>\n                <br>\n                <h3>Models e Propriedades</h3>\n                <br>\n                <ul>\n                  <li>Os <strong>Models</strong> representam as entidades do domínio, como tabelas do banco de dados. Eles contêm <strong>propriedades</strong> que refletem as colunas dessas tabelas e incluem validações e anotações que definem o comportamento dos dados. Os models são essenciais para garantir a integridade e consistência dos dados na aplicação.</li>\n                </ul>\n                <br>\n                <h3>Conexão com Banco de Dados</h3>\n                <br>\n                <ul>\n                  <li>A conexão com o banco de dados é gerenciada de forma eficiente utilizando <strong>Dapper</strong>, um micro ORM que permite consultas SQL rápidas e flexíveis. Com o Dapper, o acesso a dados é simplificado, facilitando a execução de comandos SQL e mapeamento de resultados para objetos C#.</li>\n                </ul>\n                <br>\n                <h3>Repositórios</h3>\n                <br>\n                <ul>\n                  <li>Os <strong>Repositórios</strong> encapsulam a lógica de acesso a dados, proporcionando uma camada de abstração entre os controllers e o banco de dados. Eles centralizam as operações de persistência e recuperação de dados, promovendo um código mais modular e testável.</li>\n                </ul>\n                <br>\n                <h2>Tecnologias e Pacotes Utilizados</h2>\n                <br>\n                <ul>\n                  <li><strong>.NET 6</strong>: Framework utilizado para construir a aplicação, fornecendo uma base sólida e moderna para o desenvolvimento.</li>\n                  <li><strong>Dapper</strong>: Micro ORM utilizado para facilitar a interação com o banco de dados de forma rápida e eficiente.</li>\n                  <li><strong>Entity Framework Core</strong>: Embora o Dapper seja o principal ORM, o projeto também inclui o Entity Framework Core para funcionalidades adicionais, como migrações de banco de dados.</li>\n                  <li><strong>Swashbuckle.AspNetCore</strong>: Ferramenta utilizada para gerar documentação interativa da API via Swagger, facilitando o desenvolvimento e o consumo da API.</li>\n                </ul><br>"},{imagem:N,links:[{text:"GitHub",link:"https://github.com/jeanlsfortes/Entrega/"},{text:"Figma",link:"https://www.figma.com/proto/3lo7TIja6hDdFJfDYysM8J/Prot%C3%B3tipos-de-alto-n%C3%ADvel--Livraria-Bora-Ler-Jorgin?node-id=34-4&starting-point-node-id=34%3A4&t=S4TZ5Mh0gjpj5ZPl-1"}],titulo:"Sistema de Gestão de Biblioteca",anoCriacao:"setembro de 2022",descricao:"<h1>Sistema de Gestão de Biblioteca</h1>\n                    <br>\n                    <p>Este projeto foi desenvolvido voluntariamente para a <strong>Biblioteca Municipal Raul Brandão</strong>. Embora apenas o início do projeto tenha sido disponibilizado, ele foi entregue e atualmente está em uso na biblioteca, facilitando a gestão de livros e usuários.</p>\n                      <br>\n                    <h2>Tecnologias Utilizadas</h2>\n                    <br>\n                    <ul>\n                        <li><strong>Java 18</strong>: A versão mais recente do Java foi utilizada para garantir a eficiência e a compatibilidade com as novas funcionalidades da linguagem.</li>\n                        <li><strong>Spring Boot</strong>: Este framework foi escolhido por sua facilidade de configuração e pela capacidade de criar aplicações empresariais robustas e escaláveis.</li>\n                        <li><strong>Spring Data JPA</strong>: Utilizado para o gerenciamento de dados, o Spring Data JPA simplifica a integração entre a aplicação e o banco de dados, permitindo a implementação de repositórios personalizados.</li>\n                        <li><strong>Hibernate</strong>: O Hibernate foi integrado ao projeto para o mapeamento objeto-relacional (ORM), facilitando a interação com o banco de dados relacional.</li>\n                        <li><strong>Maven</strong>: Maven foi usado para a gestão de dependências e construção do projeto, garantindo um ambiente de desenvolvimento consistente.</li>\n                        <li><strong>Lombok</strong>: Utilizado para reduzir a verbosidade do código, gerando automaticamente getters, setters, construtores e outros métodos.</li>\n                        <li><strong>H2 Database</strong>: Um banco de dados em memória foi utilizado para testes e desenvolvimento rápido, garantindo que a aplicação pudesse ser testada sem a necessidade de um banco de dados externo.</li>\n                    </ul>\n                      <br>\n                    <h2>Arquitetura do Sistema</h2>\n                    <br>\n                    <p>A arquitetura do sistema foi baseada em um modelo de <strong>Repository-Service</strong>, garantindo uma separação clara das responsabilidades e facilitando a manutenção e a escalabilidade do código.</p>\n                    <br>\n                    <ul>\n                        <li><strong>Repository</strong>: A camada de repositórios foi implementada utilizando Spring Data JPA, permitindo o acesso aos dados de forma abstrata e encapsulando a lógica de persistência.</li>\n                        <li><strong>Service</strong>: A camada de serviços foi responsável por implementar a lógica de negócios, utilizando os repositórios para acessar os dados e processá-los conforme as regras de negócio.</li>\n                        <li><strong>Service Implementation</strong>: As classes de implementação dos serviços foram projetadas para serem facilmente extensíveis, permitindo a adição de novas funcionalidades sem comprometer o código existente.</li>\n                    </ul>\n                    <br>\n                    <h2>Funcionalidades do Sistema</h2>\n                    <br>\n                    <ul>\n                        <li><strong>Gestão de Livros</strong>: Permite a adição, edição, remoção e consulta de livros no acervo da biblioteca.</li>\n                        <li><strong>Gestão de Usuários</strong>: Funcionalidades para cadastro, consulta e gerenciamento de usuários da biblioteca.</li>\n                        <li><strong>Empréstimos e Devoluções</strong>: Sistema para registrar e gerenciar o empréstimo e devolução de livros, com controle de prazos e penalidades.</li>\n                    </ul>"},{imagem:q,links:[{text:"GitHub",link:"https://github.com/jeanlsfortes/NLW-Copa"},{text:"Figma",link:"https://www.figma.com/community/file/1169028343875283461"}],titulo:"NLW Copa do Mundo",anoCriacao:"novembro de 2022",descricao:'<h1>NLW Copa do Mundo</h1>\n            <div align="center">\n                <img src="https://img.shields.io/static/v1?label=NLW&message=10&color=F7DD43&labelColor=202024" alt="NLW 10 - Copa" />\n                <a href="LICENSE"><img src="https://img.shields.io/static/v1?label=License&message=MIT&color=F7DD43&labelColor=202024" alt="License"></a>\n            </div>\n\n            <img src=".github/web.png">\n\n            <h2>💻 Projeto</h2>\n            <p>Aplicação para participar de bolões da Copa do Mundo 2022.</p>\n            <p>Participei deste evento e construí uma aplicação inteira do zero, tanto web quanto mobile.</p>\n\n            <h2>✨ Tecnologia</h2>\n            <ul>\n                <li><a href="https://www.typescriptlang.org/">TypeScript</a></li>\n                <li><a href="https://reactjs.org/">React</a></li>\n                <li><a href="https://reactnative.dev/">React Native</a></li>\n                <li><a href="https://expo.dev/">Expo</a></li>\n                <li><a href="https://www.fastify.io/">Fastify</a></li>\n                <li><a href="https://www.prisma.io/">Prisma</a></li>\n                <li>E muitas outras…</li>\n            </ul>\n\n            <h2>🚀 Como executar</h2>\n            <p>Em todos os projetos, ao acessar a pasta, é preciso baixar os pacotes com o gerenciador de sua preferência.</p>\n            <p>Acesse a documentação de cada projeto:</p>\n            <ul>\n                <li><a href="./server/README.md">Backend</a></li>\n                <li><a href="./web/README.md">Web</a></li>\n                <li><a href="./mobile/README.md">Mobile</a></li>\n            </ul>\n\n            <h2>🔖 Layout</h2>\n            <p>Você pode visualizar o layout do projeto através do link abaixo:</p>\n            <ul>\n                <li><a href="https://www.figma.com/community/file/1169028343875283461">Layout</a></li>\n            </ul>\n            <p>Lembrando que você precisa ter uma conta no <a href="http://figma.com/">Figma</a>.</p>\n\n            <h2>📝 License</h2>\n            <p>Esse projeto está sob a licença MIT. Veja o arquivo <a href="LICENSE">LICENSE</a> para mais detalhes.</p>\n\n            <hr>\n\n            <div align="center">\n                <p>Feito com 💜 by Rocketseat</p>\n                <p><a href="https://discord.gg/rocketseat">👉 Participe da nossa comunidade 👈</a></p>\n            </div>\n\n            <div align="center">\n                <a href="https://discord.gg/rocketseat" target="_blank">\n                    <img align="center" src="https://storage.googleapis.com/golden-wind/comunidade/rodape.svg" alt="banner"/>\n                </a>\n            </div>'},{imagem:F,links:[{text:"Figma",link:"https://www.figma.com/design/4HzGv8DN95FNzgzT9AvefK/DSMovie1?node-id=113-182&t=fk6v69IQZl4mhJNq-1"},{text:"GitHub",link:"https://github.com/jeanlsfortes/Projeto-Dsmovie/tree/main/frontend"}],titulo:"DSMovie",anoCriacao:"janeiro 2022",descricao:"  <h1>DSMove</h1>\n                        <br>\n                        <p><strong>DSMove</strong> é uma aplicação inovadora desenvolvida com <strong>React</strong> no Frontend e <strong>Spring</strong> no Backend. Esta plataforma permite aos usuários avaliar e comentar sobre uma vasta seleção de filmes. Com uma interface intuitiva e responsiva, os usuários podem facilmente navegar, buscar e avaliar seus filmes favoritos, contribuindo para uma comunidade engajada e apaixonada por cinema.</p>\n                        <br>\n                        <h2>Tecnologias Utilizadas</h2>\n                        <br>\n                        <h3>Frontend: React</h3>\n                        <br>\n                        <ul>\n                            <li><strong>React</strong> é uma biblioteca JavaScript amplamente utilizada para construir interfaces de usuário. Ela permite a criação de componentes reutilizáveis, facilitando a manutenção e a escalabilidade do código. Com React, a interface do usuário é atualizada de forma eficiente em resposta às mudanças de dados, proporcionando uma experiência de usuário fluida e dinâmica.</li>\n                        </ul>\n                        <br>\n                        <h3>Backend: Spring</h3>\n                        <br>\n                        <ul>\n                            <li><strong>Spring</strong> é um framework Java para desenvolvimento de aplicações robustas e escaláveis. Ele oferece uma ampla gama de funcionalidades, incluindo injeção de dependência, segurança, transações e suporte a APIs RESTful. O Spring facilita a criação de aplicações empresariais complexas, garantindo alta performance e facilidade de manutenção.</li>\n                        </ul>\n                        <br>\n                        <h2>Funcionalidades do DSMove</h2>\n                        <br>\n                        <ul>\n                            <li><strong>Avaliação de Filmes</strong>: Os usuários podem avaliar filmes com base em uma escala de estrelas, deixando comentários e feedbacks detalhados.</li>\n                            <li><strong>Busca e Navegação</strong>: A plataforma permite a busca eficiente de filmes por título, gênero ou ano de lançamento.</li>\n                            <li><strong>Interface Responsiva</strong>: Desenvolvida com React, a interface é adaptável a diferentes dispositivos, proporcionando uma experiência consistente em desktops, tablets e smartphones.</li>\n                            <li><strong>Segurança e Performance</strong>: Utilizando Spring no backend, o DSMove garante a segurança dos dados dos usuários e a alta performance nas operações de busca e avaliação.</li></ul>"}]}}};const H=(0,R.A)(J,[["render",u]]);var G=H,_=a.p+"media/universo.8f6d6502.mp4",W={components:{MyProjects:G},data(){return{space:_,show:!0}}};const X=(0,R.A)(W,[["render",d]]);var V=X}}]);
//# sourceMappingURL=873.7e22f64f.js.map